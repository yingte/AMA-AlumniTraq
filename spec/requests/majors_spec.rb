# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe('/majors', type: :request) do
  # This should return the minimal set of attributes required to create a valid
  # Major. As you add validations to Major, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    {
      name: 'Valid name'
    }
  end

  let(:invalid_attributes) do
    {
      name: nil
    }
  end

  describe 'GET /index' do
    it 'renders a successful response' do
      Major.find_or_create_by!(valid_attributes)
      get majors_url
      expect(response).to(be_successful)
    end
  end

  describe 'GET /show' do
    it 'renders a successful response' do
      major = Major.find_or_create_by!(valid_attributes)
      get major_url(major)
      expect(response).to(be_successful)
    end
  end

  describe 'GET /new' do
    it 'renders a successful response' do
      get new_major_url
      expect(response).to(be_successful)
    end
  end

  describe 'GET /edit' do
    it 'renders a successful response' do
      major = Major.find_or_create_by!(valid_attributes)
      get edit_major_url(major)
      expect(response).to(be_successful)
    end
  end

  describe 'POST /create' do
    context 'with valid parameters' do
      it 'creates a new Major' do
        expect do
          post(majors_url, params: { major: valid_attributes })
        end.to(change(Major, :count).by(1))
      end

      it 'redirects to the created major' do
        post majors_url, params: { major: valid_attributes }
        expect(response).to(redirect_to(major_url(Major.last)))
      end
    end

    context 'with invalid parameters' do
      it 'does not create a new Major' do
        expect do
          post(majors_url, params: { major: invalid_attributes })
        end.to(change(Major, :count).by(0))
      end

      it "renders a successful response (i.e. to display the 'new' template)" do
        post majors_url, params: { major: invalid_attributes }
        expect(response.body).to(include('New Major'))
      end
    end
  end

  describe 'PATCH /update' do
    context 'with valid parameters' do
      let(:new_attributes) do
        {
          name: 'Valid name2'
        }
      end

      it 'updates the requested major' do
        major = Major.find_or_create_by!(valid_attributes)
        patch major_url(major), params: { major: new_attributes }
        major.reload
        follow_redirect!
        expect(response.body).to(include('Valid name2'))
      end

      it 'redirects to the major' do
        major = Major.find_or_create_by!(valid_attributes)
        patch major_url(major), params: { major: new_attributes }
        major.reload
        expect(response).to(redirect_to(major_url(major)))
      end
    end

    context 'with invalid parameters' do
      it "renders a successful response (i.e. to display the 'edit' template)" do
        major = Major.find_or_create_by!(valid_attributes)
        patch major_url(major), params: { major: invalid_attributes }
        expect(response.body).to(include('Editing Major'))
      end
    end
  end

  describe 'DELETE /destroy' do
    it 'destroys the requested major' do
      major = Major.find_or_create_by!(valid_attributes)
      expect do
        delete(major_url(major))
      end.to(change(Major, :count).by(-1))
    end

    it 'redirects to the majors list' do
      major = Major.find_or_create_by!(valid_attributes)
      delete major_url(major)
      expect(response).to(redirect_to(majors_url))
    end
  end
end
