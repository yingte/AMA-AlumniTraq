# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe('/users', type: :request) do
  admin_user = get_admin_user
  login_user(admin_user)

  # This should return the minimal set of attributes required to create a valid
  # User. As you add validations to User, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    {
      email: 'member@test.com',
      role_id: 2,
      first_name: 'Test',
      last_name: 'User',
      major_id: 1,
      graduation_year: 2023,
      phone: '8328675309',
      is_approved: true
    }
  end

  let(:valid_attributes_new) do
    {
      email: 'member@test.com',
      role_id: 2,
      first_name: 'Test',
      last_name: 'User',
      major_id: 1,
      graduation_year: 2023,
      phone: '8328675309',
      is_approved: true
    }
  end

  let(:invalid_attributes) do
    {
      email: 'member@test.com',
      role_id: 2,
      first_name: nil,
      last_name: nil,
      major_id: 1,
      graduation_year: 2023,
      phone: '8328675309',
      is_approved: true
    }
  end

  describe 'GET /index' do
    it 'renders a successful response' do
      User.find_or_create_by!(valid_attributes)
      get users_url
      expect(response).to(be_successful)
    end
  end

  describe 'GET /show' do
    it 'renders a successful response' do
      user = User.find_or_create_by!(valid_attributes)
      get user_url(user)
      expect(response).to(be_successful)
    end
  end

  describe 'GET /new' do
    it 'renders a successful response' do
      get new_user_url
      expect(response).to(be_successful)
    end
  end

  describe 'GET /edit' do
    it 'renders a successful response' do
      user = User.find_or_create_by!(valid_attributes)
      get edit_user_url(user)
      expect(response).to(be_successful)
    end
  end

  describe 'POST /create' do
    context 'with valid parameters' do
      it 'creates a new User' do
        destroy_if User.find_by(email: valid_attributes_new[:email])
        
        expect do
          post(users_url, params: { user: valid_attributes_new })
        end.to(change(User, :count).by(1))
      end

      it 'redirects to the created user' do
        destroy_if User.find_by(email: valid_attributes_new[:email])

        post users_url, params: { user: valid_attributes_new }
        expect(response).to(redirect_to(user_url(User.last)))
      end
    end

    context 'with invalid parameters' do
      it 'does not create a new User' do
        expect do
          post(users_url, params: { user: invalid_attributes })
        end.to(change(User, :count).by(0))
      end

      it "renders a successful response (i.e. to display the 'new' template)" do
        post users_url, params: { user: invalid_attributes }
        expect(response.body).to(include('New User'))
      end
    end
  end

  describe 'PATCH /update' do
    context 'with valid parameters' do
      let(:new_attributes) do
        {
          email: 'member@test.com',
          role_id: 2,
          first_name: 'Test',
          last_name: 'User2',
          major_id: 1,
          graduation_year: 2023,
          phone: '8328675309',
          is_approved: true
        }
      end

      it 'updates the requested user' do
        user = User.find_or_create_by!(valid_attributes)
        patch user_url(user), params: { user: new_attributes }
        user.reload
        follow_redirect!
        expect(response.body).to(include('User2'))
      end

      it 'redirects to the user' do
        user = User.find_or_create_by!(valid_attributes)
        patch user_url(user), params: { user: new_attributes }
        user.reload
        expect(response).to(redirect_to(user_url(user)))
      end
    end

    context 'with invalid parameters' do
      it "renders a successful response (i.e. to display the 'edit' template)" do
        user = User.find_or_create_by!(valid_attributes)
        patch user_url(user), params: { user: invalid_attributes }
        expect(response.body).to(include('Editing User'))
      end
    end
  end

  describe 'DELETE /destroy' do
    it 'destroys the requested user' do
      user = User.find_or_create_by!(valid_attributes)
      expect do
        delete(user_url(user))
      end.to(change(User, :count).by(-1))
    end

    it 'redirects to the users list' do
      # Manually reset the previous path
      ENV['current_path'] = users_path

      user = User.find_or_create_by!(valid_attributes)
      delete user_url(user)
      expect(response).to(redirect_to(users_url))
    end
  end
end
