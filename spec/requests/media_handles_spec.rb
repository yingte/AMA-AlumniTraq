# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe('/media_handles', type: :request) do
  alumnus_user = get_alumnus_user
  alumnus_info = get_alumnus_info(alumnus_user)
  login_user(alumnus_user)

  # This should return the minimal set of attributes required to create a valid
  # MediaHandle. As you add validations to MediaHandle, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    {
      alumnus_id: alumnus_info.id,
      platform: 'Facebook',
      link: 'https://facebook.com'
    }
  end

  let(:invalid_attributes) do
    {
      alumnus_id: nil,
      platform: 'Facebook',
      link: 'https://facebook.com'
    }
  end

  describe 'GET /index' do
    it 'renders a successful response' do
      MediaHandle.find_or_create_by!(valid_attributes)
      get media_handles_url
      expect(response).to(be_successful)
    end
  end

  describe 'GET /show' do
    it 'renders a successful response' do
      media_handle = MediaHandle.find_or_create_by!(valid_attributes)
      get media_handle_url(media_handle)
      expect(response).to(be_successful)
    end
  end

  describe 'GET /new' do
    it 'renders a successful response' do
      get new_media_handle_url
      expect(response).to(be_successful)
    end
  end

  describe 'GET /edit' do
    it 'renders a successful response' do
      media_handle = MediaHandle.find_or_create_by!(valid_attributes)
      get edit_media_handle_url(media_handle)
      expect(response).to(be_successful)
    end
  end

  describe 'POST /create' do
    context 'with valid parameters' do
      it 'creates a new MediaHandle' do
        expect do
          post(media_handles_url, params: { media_handle: valid_attributes })
        end.to(change(MediaHandle, :count).by(1))
      end

      it 'redirects to the created media_handle' do
        post media_handles_url, params: { media_handle: valid_attributes }
        expect(response).to(redirect_to(media_handle_url(MediaHandle.last)))
      end
    end

    context 'with invalid parameters' do
      it 'does not create a new MediaHandle' do
        expect do
          post(media_handles_url, params: { media_handle: invalid_attributes })
        end.to(change(MediaHandle, :count).by(0))
      end

      it "renders a successful response (i.e. to display the 'new' template)" do
        post media_handles_url, params: { media_handle: invalid_attributes }
        expect(response.body).to(include('New Media Handle'))
      end
    end
  end

  describe 'PATCH /update' do
    context 'with valid parameters' do
      let(:new_attributes) do
        {
          alumnus_id: alumnus_info.id,
          platform: 'Facebook',
          link: 'https://www.facebook.com/profile.php?id=100086613830827'
        }
      end

      it 'updates the requested media_handle' do
        media_handle = MediaHandle.find_or_create_by!(valid_attributes)
        patch media_handle_url(media_handle), params: { media_handle: new_attributes }
        media_handle.reload
        follow_redirect!
        expect(response.body).to(include('https://www.facebook.com/profile.php?id=100086613830827'))
      end

      it 'redirects to the media_handle' do
        media_handle = MediaHandle.find_or_create_by!(valid_attributes)
        patch media_handle_url(media_handle), params: { media_handle: new_attributes }
        media_handle.reload
        expect(response).to(redirect_to(media_handle_url(media_handle)))
      end
    end

    context 'with invalid parameters' do
      it "renders a successful response (i.e. to display the 'edit' template)" do
        media_handle = MediaHandle.find_or_create_by!(valid_attributes)
        patch media_handle_url(media_handle), params: { media_handle: invalid_attributes }
        expect(response.body).to(include('Editing Media Handle'))
      end
    end
  end

  describe 'DELETE /destroy' do
    it 'destroys the requested media_handle' do
      media_handle = MediaHandle.find_or_create_by!(valid_attributes)
      expect do
        delete(media_handle_url(media_handle))
      end.to(change(MediaHandle, :count).by(-1))
    end

    it 'redirects to the media_handles list' do
      media_handle = MediaHandle.find_or_create_by!(valid_attributes)
      delete media_handle_url(media_handle)
      expect(response).to(redirect_to(media_handles_url))
    end
  end
end
